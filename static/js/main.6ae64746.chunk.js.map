{"version":3,"sources":["Load.js","serviceWorker.js","Main.js","index.js"],"names":["__webpack_require__","d","__webpack_exports__","Initial","BlackBar","PhotoPlaceholder","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_material_ui_core_CircularProgress__WEBPACK_IMPORTED_MODULE_1__","a","createElement","style","width","height","display","justifyContent","alignItems","color","zIndex","backgroundColor","opacity","Boolean","window","location","hostname","match","Home","lazy","e","then","bind","NavBar","AboutMe","Contact","Promise","all","Socials","WhatIDo","Photos","Main","scrollbar","useRef","navbar","_useState","useState","_useState2","Object","slicedToArray","showVideo","handleShowVideo","_useState3","innerWidth","_useState4","isMobile","handleIsMobile","useEffect","addEventListener","handleResize","setMargin","document","getElementById","div","childNodes","scrollWidth","clientWidth","marginRight","Math","abs","react_default","className","react","fallback","Load","lib","id","autoHide","ref","current","noscrollx","universal","onScroll","scroll","sb","Button","onClick","scrollToTop","classes","label","react_fontawesome_index_es","icon","faAngleUp","ReactDOM","render","src_Main","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6ae64746.chunk.js","sourcesContent":["import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nexport function Initial() {\n    return (\n        <div style={{ \n        width: \"100%\", \n        height: \"100vh\", \n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        }}>\n            <CircularProgress color=\"secondary\" style={{\n                zIndex: \"999\",\n                // position: \"relative\",\n                // top: \"50%\",\n                // left: \"50%\",\n                // transform: \"translate(-50%, -50%)\"\n            }}/>\n        </div>\n    )\n}\n\nexport  function BlackBar() {\n    return (\n        <div style={{width: \"100%\", height: \"30px\", backgroundColor: \"black\", opacity:\"0.5\", display: \"flex\", justifyContent:\"center\"}}>\n            {/* <p style={{color: \"white\"}}>Loading...</p> */}\n        </div>\n    )\n}\n\nexport function PhotoPlaceholder () {\n    return ( \n        <div style={{width: \"100%\", height: \"600px\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}} >\n            <CircularProgress color=\"secondary\" />\n        </div>\n    )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useEffect, useRef, lazy, Suspense, useState } from 'react';\nimport './CSS/index.css';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport Button from '@material-ui/core/Button';\nimport { faAngleUp } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { Initial } from './Load';\nconst Home = lazy(() => import('./Home'));\nconst NavBar = lazy(() => import('./NavBar'));\nconst AboutMe = lazy(() => import('./AboutMe'));\nconst Contact = lazy(() => import('./Contact'));\nconst Socials = lazy(() => import('./Socials'));\nconst WhatIDo = lazy(() => import('./WhatIDo'));\nconst Photos = lazy(() => import('./Photos'));\n\n\nfunction Main () {\n    let scrollbar = useRef();\n    let navbar = useRef();\n\n    const [showVideo, handleShowVideo] = useState(true);\n    const [isMobile, handleIsMobile] = useState(window.innerWidth < 500 ? true : false);\n\n    useEffect (() => {\n        window.addEventListener('resize', handleResize);\n        handleResize();\n    }, [])\n\n    const handleResize = () => {\n        if (window.innerWidth < 500) {\n            handleIsMobile(true);\n            handleShowVideo(false);\n        }\n        else {\n            handleShowVideo(true);\n            handleIsMobile(false);\n        }\n        setMargin();\n\n    }\n\n    const setMargin = () => {\n        let a = document.getElementById(\"scrollbar\");\n        // let main = document.getElementById(\"main_content\");\n        let div = a.childNodes[0];\n        if (a.scrollWidth - div.clientWidth !== 0) {\n            div.style.marginRight = Math.abs(a.scrollWidth - div.clientWidth)*-1 + \"px\";\n        }\n    }\n\n    const scrollUp = () => {\n        scrollbar.current.scrollToTop();\n    }\n\n    return (\n        <div className=\"main\">\n            <Suspense fallback={<Initial />}>\n                \n                <Scrollbars id=\"scrollbar\" autoHide ref={e => {scrollbar.current = e;} }  noscrollx=\"true\" universal\n                    style={{ \n                        width: \"100%\", \n                        height: \"100vh\",\n                        }} onScroll={() => navbar.current.scroll()}>\n\n                    <NavBar ref={navbar} sb={scrollbar} showVideo={showVideo} handleShowVideo={handleShowVideo} isMobile={isMobile} />\n                    <div className=\"main_content\" id=\"main_content\">\n                        <Home showVideo={showVideo} isMobile={isMobile}/>\n                        <div className=\"sub_content\">\n                            <AboutMe />\n                            <WhatIDo />\n                            <Photos />\n                            <Contact />\n       \n                            <Button id=\"scrollTop\" onClick={scrollUp} classes={{label: 'label'}}><FontAwesomeIcon icon={faAngleUp} /></Button>\n                            <div className=\"placeholder_big\"></div>\n                            <div className=\"placeholder_big\"></div>\n                        </div>\n                        {/* <div style={{width: \"100%\", height: \"2000px\"}}></div> */}\n                    </div>\n                    <Socials />\n                </Scrollbars>\n               \n            </Suspense>\n        </div>\n    )\n    \n};\n\nexport default Main; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './CSS/index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Main from './Main';\n\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<Main />, document.getElementById('root') );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}