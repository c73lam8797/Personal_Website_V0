{"version":3,"sources":["DropdownNavBar.js"],"names":["__webpack_require__","r","__webpack_exports__","d","DropdownNavBar","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_1__","_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_2__","_material_ui_core_Switch__WEBPACK_IMPORTED_MODULE_5__","_material_ui_core_FormControlLabel__WEBPACK_IMPORTED_MODULE_6__","_ref","sb","showVideo","handleShowVideo","clicked","handleClick","hideDropdownMenu","hideDropdownBar","showBar","scrollFunction","isMobile","useEffect","navbar","document","getElementById","addEventListener","passive","hoverFunction","leaveFunction","dropdown","body","contains","a","createElement","className","id","style","display","position","onClick","header","visibility","transition","opacity","removeEventListener","icon","faWindowClose","size","faAlignJustify","color","labelPlacement","label","faPhotoVideo","control","checked","classes","root","onChange","e","target","map","dir","index","key","href","toUpperCase"],"mappings":"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","file":"static/js/15.766de819.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faAlignJustify } from '@fortawesome/free-solid-svg-icons';\nimport { faWindowClose } from '@fortawesome/free-solid-svg-icons';\nimport './CSS/index.css';\nimport './CSS/header_footer.css';\nimport Switch from '@material-ui/core/Switch';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { faPhotoVideo } from '@fortawesome/free-solid-svg-icons';\n\nexport default function DropdownNavBar ({sb, showVideo, handleShowVideo, clicked, handleClick, hideDropdownBar, hideDropdownMenu, showBar, scrollFunction, isMobile}) {\n\n    useEffect(() => {\n        let navbar = document.getElementById(\"placeholderBar\"); \n        navbar.addEventListener('touchstart', scrollFunction, {passive: true})\n        navbar.addEventListener('mouseenter', hoverFunction);\n        navbar.addEventListener('mouseleave', leaveFunction);\n    });\n\n    useEffect(() => {\n        const dropdown = document.getElementById(\"drop_nb\");\n        hideDropdownMenu(dropdown);\n    }, []);\n    \n    const handleChange = (e) => {\n        if (e.target.checked) { handleShowVideo(true); }\n        else { handleShowVideo(false); }\n    }\n\n    const hoverFunction = () => {\n        if (!clicked) {\n            if (document.body.contains(document.getElementById('placeholderBar'))) { \n                let navbar = document.getElementById(\"placeholderBar\"); \n                showBar(navbar);\n            } \n        }\n    };\n\n    const leaveFunction = () => {    \n        if (!clicked) {\n            scrollFunction();\n        } \n    }\n\n    function dropdown () {\n        handleClick(!clicked);\n        const dropdown = document.getElementById('drop_nb');\n        const header = document.getElementById(\"placeholderBar\");\n        if (dropdown.style.visibility === \"hidden\") {\n            dropdown.style.visibility = \"visible\"\n            dropdown.style.transition = \"opacity 0.5s ease-in\"\n            dropdown.style.opacity = 1;\n\n            header.style.opacity = 1;\n            header.removeEventListener('mouseenter', hoverFunction);\n            header.removeEventListener('mouseleave', leaveFunction);\n            header.removeEventListener('touchstart', scrollFunction, {passive: true})\n        }\n        else {\n            hideDropdownMenu(dropdown);\n            scrollFunction();\n        }\n    }\n\n\n    const directories = [\"home\", \"about\", \"whatido\", \"photos\", \"contact\"];\n\n    return (\n        <div className=\"DropNavBar\" id=\"DropNavBar\">\n            <div id=\"placeholderBar\">\n                <div style={{display: \"inline-block\", position:\"relative\"}}> \n                    <button id=\"toggle\" onClick={dropdown}>\n                        {clicked? \n                        <FontAwesomeIcon icon={faWindowClose} size=\"1x\" /> :\n                        <FontAwesomeIcon icon={faAlignJustify} size=\"1x\" />}\n                    </button>\n                </div>\n                {isMobile? null :\n                <div id=\"switch_container\" >\n                    <FormControlLabel style={{color: \"white\"}}\n                                        labelPlacement=\"start\"\n                                        label={<FontAwesomeIcon icon={faPhotoVideo} size=\"1x\" /> }\n                                        id=\"toggle_background\"\n                                        control={\n                                            <Switch checked={showVideo} \n                                                    size=\"small\" \n                                                    classes={{root:'switch'}}\n                                                    color=\"secondary\"  \n                                                    onChange={handleChange}/>}  />\n                    \n                </div>\n                }    \n            </div>\n            <ul id=\"drop_nb\">\n                {directories.map((dir, index) => {\n                    if (dir === \"whatido\") {\n                        return (\n                            <li key={index}><a href = {`/#`+dir}>WHAT I DO</a></li>\n                        )\n                    }\n                    else {\n                        return (\n                            <li key={index}><a href = {`/#`+dir}>{dir.toUpperCase()}</a></li>\n                        )\n                    }\n                })}\n            </ul>\n        </div>\n    )\n}"],"sourceRoot":""}